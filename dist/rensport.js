(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Loadable = (function () {
    function Loadable() {
        this._isLoaded = false;
        this._loadFailed = false;
        this._waitingForLoadSuccess = [];
        this._waitingForLoadFail = [];
        this.doLoad();
    }
    Object.defineProperty(Loadable.prototype, "isLoaded", {
        get: function () {
            return this._isLoaded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Loadable.prototype, "hasLoadFailed", {
        get: function () {
            return this._loadFailed;
        },
        enumerable: true,
        configurable: true
    });
    Loadable.prototype.afterLoad = function (loadSuccessCallback, loadFailCallback) {
        if (this.isLoaded) {
            loadSuccessCallback();
        }
        else if (this.hasLoadFailed) {
            if (loadFailCallback) {
                loadFailCallback();
            }
        }
        else {
            this._waitingForLoadSuccess.push(loadSuccessCallback);
            if (loadFailCallback) {
                this._waitingForLoadFail.push(loadFailCallback);
            }
        }
    };
    Loadable.prototype.loadSuccess = function () {
        this._isLoaded = true;
        for (var _i = 0, _a = this._waitingForLoadSuccess; _i < _a.length; _i++) {
            var callback = _a[_i];
            callback();
        }
        this._waitingForLoadSuccess = [];
    };
    Loadable.prototype.loadFailed = function (error) {
        this._loadFailed = true;
        for (var _i = 0, _a = this._waitingForLoadFail; _i < _a.length; _i++) {
            var callback = _a[_i];
            callback();
        }
        this._waitingForLoadFail = [];
        throw new Error('Loading failed : ' + error);
    };
    return Loadable;
}());
exports.Loadable = Loadable;
},{}],2:[function(require,module,exports){
"use strict";
var FBOpeningInfo_1 = require("./facebookplugins/FBOpeningInfo");
var FacebookSDK_1 = require("./facebookplugins/FacebookSDK");
var OpeningInfoView_1 = require("./view/OpeningInfoView");
var Ren = (function () {
    function Ren() {
        var _this = this;
        this._facebookSDK = new FacebookSDK_1.FacebookSDK();
        this._facebookSDK.afterLoad(function () {
            _this._openingInfo = new FBOpeningInfo_1.FBOpeningInfo();
            _this._openingInfo.afterLoad(function () {
                var view = OpeningInfoView_1.openingInfoView(_this._openingInfo);
                document.querySelector('#ren-openingsuren').appendChild(view);
            });
        });
    }
    Object.defineProperty(Ren.prototype, "facebookFeed", {
        get: function () {
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ren.prototype, "openingInfo", {
        get: function () {
            return this._openingInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ren.prototype, "facebookSDK", {
        get: function () {
            return this._facebookSDK;
        },
        enumerable: true,
        configurable: true
    });
    ;
    return Ren;
}());
exports.Ren = Ren;
},{"./facebookplugins/FBOpeningInfo":4,"./facebookplugins/FacebookSDK":5,"./view/OpeningInfoView":6}],3:[function(require,module,exports){
"use strict";
var Ren_1 = require("./Ren");
window.RenSport = new Ren_1.Ren();
},{"./Ren":2}],4:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var FacebookSDK_1 = require("./FacebookSDK");
var Loadable_1 = require("../Loadable");
var FBOpeningInfo = (function (_super) {
    __extends(FBOpeningInfo, _super);
    function FBOpeningInfo() {
        _super.call(this);
        this.monday = [];
        this.tuesday = [];
        this.wednesday = [];
        this.thursday = [];
        this.friday = [];
        this.saturday = [];
        this.sunday = [];
    }
    Object.defineProperty(FBOpeningInfo.prototype, "isCurrentlyOpen", {
        get: function () {
            var now = new Date(), day = jsValueToDay(now.getDay()), infoForDay = this[day];
            for (var i = 0; i < infoForDay.length; i += 2) {
                if (liesNowInInterval(infoForDay[i], infoForDay[i + 1])) {
                    return true;
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    // Called by super();
    FBOpeningInfo.prototype.doLoad = function () {
        var _this = this;
        FacebookSDK_1.FacebookSDK.page(['hours'], function (roughdata) {
            if (!roughdata.error) {
                _this.parseData(roughdata);
                _this.loadSuccess();
            }
            else {
                _this.loadFailed(roughdata.error);
            }
        });
    };
    FBOpeningInfo.prototype.parseData = function (roughdata) {
        this.monday = toTimings(Object.keys(roughdata.hours).filter(function (openingTime) {
            return openingTime.indexOf('mon') > -1;
        }).sort(compareOpeningInfo), roughdata);
        this.tuesday = toTimings(Object.keys(roughdata.hours).filter(function (openingTime) {
            return openingTime.indexOf('tue') > -1;
        }).sort(compareOpeningInfo), roughdata);
        this.wednesday = toTimings(Object.keys(roughdata.hours).filter(function (openingTime) {
            return openingTime.indexOf('wed') > -1;
        }).sort(compareOpeningInfo), roughdata);
        this.thursday = toTimings(Object.keys(roughdata.hours).filter(function (openingTime) {
            return openingTime.indexOf('thu') > -1;
        }).sort(compareOpeningInfo), roughdata);
        this.friday = toTimings(Object.keys(roughdata.hours).filter(function (openingTime) {
            return openingTime.indexOf('fri') > -1;
        }).sort(compareOpeningInfo), roughdata);
        this.saturday = toTimings(Object.keys(roughdata.hours).filter(function (openingTime) {
            return openingTime.indexOf('sat') > -1;
        }).sort(compareOpeningInfo), roughdata);
        this.sunday = toTimings(Object.keys(roughdata.hours).filter(function (openingTime) {
            return openingTime.indexOf('sun') > -1;
        }).sort(compareOpeningInfo), roughdata);
    };
    return FBOpeningInfo;
}(Loadable_1.Loadable));
exports.FBOpeningInfo = FBOpeningInfo;
function dayToValue(day) {
    if (day === 'mon') {
        return 0;
    }
    else if (day === 'tue') {
        return 1;
    }
    else if (day === 'wed') {
        return 2;
    }
    else if (day === 'thu') {
        return 3;
    }
    else if (day === 'fri') {
        return 4;
    }
    else if (day === 'sat') {
        return 5;
    }
    else if (day === 'sun') {
        return 6;
    }
}
function jsValueToDay(value) {
    if (value === 0) {
        return 'sunday';
    }
    else if (value === 1) {
        return 'monday';
    }
    else if (value === 2) {
        return 'tuesday';
    }
    else if (value === 3) {
        return 'wednesday';
    }
    else if (value === 4) {
        return 'thursday';
    }
    else if (value === 5) {
        return 'friday';
    }
    else if (value === 6) {
        return 'saturday';
    }
}
function jsDayValue(day) {
    return ((dayToValue(day) + 1) % 7);
}
function compareOpeningInfo(a, b) {
    var infoA = a.split('_'), infoB = b.split('_');
    if (parseInt(infoA[1]) < parseInt(infoB[1])) {
        return -1;
    }
    else if (parseInt(infoA[1]) > parseInt(infoB[1])) {
        return 1;
    }
    else {
        if (infoA[2] === 'open') {
            return -1;
        }
        else
            return 1;
    }
}
function toTimings(openingTime, roughData) {
    var timings = [];
    for (var _i = 0, openingTime_1 = openingTime; _i < openingTime_1.length; _i++) {
        var opening = openingTime_1[_i];
        timings.push(roughData.hours[opening]);
    }
    return timings;
}
function liesNowInInterval(start, end) {
    var now = new Date(), startHoursMinutes = start.split(':'), startDate = new Date(), startHour = parseInt(startHoursMinutes[0]), startMinutes = parseInt(startHoursMinutes[1]), endHoursMinutes = end.split(':'), endDate = new Date(), endHour = parseInt(endHoursMinutes[0]), endMinutes = parseInt(endHoursMinutes[1]);
    startDate.setHours(startHour);
    startDate.setMinutes(startMinutes);
    endDate.setHours(endHour);
    endDate.setMinutes(endMinutes);
    return now >= startDate && now < endDate;
}
},{"../Loadable":1,"./FacebookSDK":5}],5:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Loadable_1 = require("../Loadable");
var FB_GRAPH_URI = 'https://graph.facebook.com/';
var PAGE_ID = '215470341909937';
var I_LIKE_GIN_TONIC = ['ZGJjNzEyZTkwZTE4MDg1Yjg2YWVhYjZjYmEyMDY5ZjY=', 'fA==', 'NTk4NzA1MjczNjM3MTIz', 'JmFjY2Vzc190b2tlbj0='];
var FacebookSDK = (function (_super) {
    __extends(FacebookSDK, _super);
    function FacebookSDK() {
        _super.call(this);
    }
    // Called by super();
    FacebookSDK.prototype.doLoad = function () {
        var _this = this;
        window.fbAsyncInit = function () {
            window.FB.init({
                appId: '598705273637123',
                xfbml: true,
                version: 'v2.6'
            });
            _this.loadSuccess();
        };
    };
    Object.defineProperty(FacebookSDK, "sdk", {
        get: function () {
            return window.FB;
        },
        enumerable: true,
        configurable: true
    });
    FacebookSDK.page = function (fields, callback) {
        var uri = FB_GRAPH_URI + PAGE_ID + '?fields=' + fields.join(',') + candy();
        FacebookSDK.sdk.api(uri, callback);
    };
    FacebookSDK.api = function (graphid, fields) {
        var uri = FB_GRAPH_URI + graphid + '?fields=' + fields.join(',') + candy();
    };
    return FacebookSDK;
}(Loadable_1.Loadable));
exports.FacebookSDK = FacebookSDK;
function candy() {
    return I_LIKE_GIN_TONIC.reverse().map(function (e) { return atob(e); }).join('');
}
},{"../Loadable":1}],6:[function(require,module,exports){
"use strict";
var days = [
    'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'
];
var daysTranslation = {
    'monday': 'Maandag',
    'tuesday': 'Dinsdag',
    'wednesday': 'Woensdag',
    'thursday': 'Donderdag',
    'friday': 'Vrijdag',
    'saturday': 'Zaterdag',
    'sunday': 'Zondag'
};
function openingInfoView(openingInfo) {
    var root = document.createElement('div');
    for (var _i = 0, days_1 = days; _i < days_1.length; _i++) {
        var day = days_1[_i];
        var dayview = dayView(day, openingInfo[day]);
        root.appendChild(dayview);
    }
    root.appendChild(currentlyOpenView(openingInfo.isCurrentlyOpen));
    return root;
}
exports.openingInfoView = openingInfoView;
function dayView(day, hours) {
    var dayview = document.createElement('div'), hourview = hourView(hours);
    dayview.innerHTML = daysTranslation[day] + ' : ' + hourview;
    return dayview;
}
function hourView(hours) {
    var hourview = '';
    for (var i = 0; i < hours.length; i += 2) {
        hourview += hours[i] + ' - ' + hours[i + 1];
        if (i + 1 != hours.length - 1) {
            hourview += ', ';
        }
    }
    return hourview || 'Gesloten';
}
function currentlyOpenView(currentlyOpen) {
    var view = document.createElement('p');
    if (currentlyOpen) {
        view.innerHTML = 'Nu Open!';
    }
    else {
        view.innerHTML = 'Momenteel gesloten';
    }
    return view;
}
},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
